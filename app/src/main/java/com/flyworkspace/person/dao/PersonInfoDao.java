package com.flyworkspace.person.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.flyworkspace.person.model.PersonInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_INFO".
*/
public class PersonInfoDao extends AbstractDao<PersonInfo, Long> {

    public static final String TABLENAME = "PERSON_INFO";

    /**
     * Properties of entity PersonInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CompanyName = new Property(1, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property ContactName = new Property(2, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Sex = new Property(4, Integer.class, "sex", false, "SEX");
        public final static Property ContactPhone = new Property(5, String.class, "contactPhone", false, "CONTACT_PHONE");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Range = new Property(7, String.class, "range", false, "RANGE");
        public final static Property Category = new Property(8, String.class, "category", false, "CATEGORY");
        public final static Property Note = new Property(9, String.class, "note", false, "NOTE");
    };


    public PersonInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PersonInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COMPANY_NAME\" TEXT NOT NULL ," + // 1: companyName
                "\"CONTACT_NAME\" TEXT," + // 2: contactName
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"SEX\" INTEGER," + // 4: sex
                "\"CONTACT_PHONE\" TEXT," + // 5: contactPhone
                "\"ADDRESS\" TEXT," + // 6: address
                "\"RANGE\" TEXT," + // 7: range
                "\"CATEGORY\" TEXT," + // 8: category
                "\"NOTE\" TEXT);"); // 9: note
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PersonInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCompanyName());
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(3, contactName);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(5, sex);
        }
 
        String contactPhone = entity.getContactPhone();
        if (contactPhone != null) {
            stmt.bindString(6, contactPhone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String range = entity.getRange();
        if (range != null) {
            stmt.bindString(8, range);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(9, category);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(10, note);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PersonInfo readEntity(Cursor cursor, int offset) {
        PersonInfo entity = new PersonInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // companyName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // contactName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contactPhone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // range
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // category
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // note
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PersonInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCompanyName(cursor.getString(offset + 1));
        entity.setContactName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setContactPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRange(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCategory(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNote(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PersonInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PersonInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
